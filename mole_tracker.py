import sys
from os import getlogin, path

from PyQt5 import QtGui, QtCore, QtWidgets
from PyQt5.QtGui import QPainter, QPen
from PyQt5.QtWidgets import QFileDialog
from Objects.mole import Mole
from Objects.profile import Profile
from Objects.imageViewer import ImageViewer

from Windows.mainWindow import Ui_MainWindow


class MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        # Creating a list that will be used to hold instances of the mole viewer, to enable multiple to be opened
        self.mole_viewers = list()
        self.mole_viewer = None
        # Using .py file generated by QtDesigner to for main window.
        self.ui = Ui_MainWindow()       # Note - use self.ui.LABEL to interact with elements in UI
        self.ui.setupUi(self)
        # Clicking the mouse calls the getPos function, which records the coordinates of the click
        self.ui.label.mousePressEvent = self.getPos
        # Add mole button
        self.ui.addButton.clicked.connect(self.add_click)
        # View mole button
        self.ui.viewButton.clicked.connect(self.view_click)
        # Remove mole button
        self.ui.removeButton.clicked.connect(self.remove_click)
        # Close application
        self.ui.exitButton.clicked.connect(self.close)
        # Keeping track of the last click coordinates
        self.x = 0
        self.y = 0

        # Initialising connection to database
        self.profile = Profile(getlogin(), path.join(path.expanduser("~"), ".MoleTrack"))

        # Loading image into viewer, with mole coords painted on
        self.load_pixmap()

    # This function creates an instance of the mole viewer, passing the moleID to it, where it retrieves the details
    # from the SQLite database. Note that the connection to the SQL database is also passed, as we need
    # to interact with the database in this viewer.
    def view_click(self):
        moleID = self.get_closest()
        if moleID == -1:
            print("Nothing to view")
        else:
            mole_viewer = ImageViewer(moleID, self.profile)
            self.mole_viewers.append(mole_viewer)
            mole_viewer.showMaximized()

    # Finds the mole closest to the mouse click.
    def get_closest(self):
        moles = self.profile.return_mole_coords()
        moles = moles.fetchall()
        if not moles:
            print("Nothing to view")
            return -1
        else:
            lowest_distance = 5000
            for mole in moles:
                distance = abs(mole[1] - self.x) + abs(mole[2] - self.y)
                if distance < lowest_distance:
                    lowest_distance = distance
                    moleID = mole[0]
            return moleID

    def closeEvent(self, event):
        print("Closing DB")
        self.profile.close_db()

    # Bundling images with pyinstaller changes their filepath, this function accounts for that
    def get_img_path(self, filename):
        if hasattr(sys, "_MEIPASS"):
            return path.join(sys._MEIPASS, filename)
        else:
            return filename
        pass

    # This function loads the outline image, with a cross drawn on the position of the last click, and points for all moles
    def load_pixmap(self):
        # Create a pixmap object and load the female_outline. TODO: add support for changing the outline
        pixmap = QtGui.QPixmap()
        pixmap.load(self.get_img_path("female_outline.png"))    # Loading the image each time, probably a quicker way to do this?
        qp = QPainter(pixmap)                   # Set pixmap with QPainter, used to draw on top of image.
        pen = QPen(QtCore.Qt.blue, 3)  # change colour as appropriate, number is thickness
        qp.setPen(pen)

        # Load moles coords from database, and draw a small blue dot on the outline for each one.
        moles = self.profile.return_mole_coords()
        pen.setColor(QtCore.Qt.blue)
        qp.setPen(pen)
        for mole in moles.fetchall():
            qp.drawEllipse(mole[1]-2, mole[2]-2, 4, 4)

        # Draw a cross where the mouse was last clicked
        pen.setColor(QtCore.Qt.red)  # change colour as appropriate
        qp.setPen(pen)
        qp.drawLine(self.x + 5, self.y + 5, self.x - 5, self.y - 5)
        qp.drawLine(self.x + 5, self.y - 5, self.x - 5, self.y + 5)
        qp.end()
        self.ui.label.setPixmap(pixmap)         # Load pixmap into label

    # This function lets a user pick a picture, which is then added to the database as a new mole
    def add_click(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(self, "Choose Image", options=options)
        print(file_name)
        if file_name != "":
            blob = self.profile.convertToBinaryData(file_name)
            self.profile.add_new_record(self.x, self.y, blob)
            self.load_pixmap()


    # Remove a mole from the database
    def remove_click(self):
        moleID = self.get_closest()
        query = QtWidgets.QMessageBox
        res = query.question(self, 'Delete Mole', 'Are you sure you want to delete this mole?', query.Yes | query.No)
        if res == query.Yes:
            self.profile.removeMole(moleID)
            self.load_pixmap()


    # Gets the position on the mouseclick on the image
    def getPos(self, event):
        self.x = event.pos().x()
        self.y = event.pos().y()
        print(self.x, self.y)
        self.load_pixmap()


def application():
    app = QtWidgets.QApplication(sys.argv)

    first_window = MyWindow()
    first_window.show()
    
    # Set the form title
    first_window.setWindowTitle("Mole Track")
    # Run the program
    sys.exit(app.exec())
    return


def main():
    print("App start")
    application()


if __name__ == '__main__':
    main()

